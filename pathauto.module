<?php
/**
 * @defgroup pathauto Pathauto: Automatically generates aliases for content
 *
 * The Pathauto module automatically generates path aliases for various kinds of
 * content (nodes, categories, users) without requiring the user to manually
 * specify the path alias. This allows you to get aliases like
 * /category/my-node-title.html instead of /node/123. The aliases are based upon
 * a "pattern" system which the administrator can control.
 */

/**
 * @file
 * Main file for the Pathauto module, which automatically generates aliases for content.
 *
 * @ingroup pathauto
 */


use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Language\Language;
use Drupal\node\NodeInterface;
use Drupal\taxonomy\TermInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\user\Entity\User;

/**
 * The default ignore word list.
 */
define('PATHAUTO_IGNORE_WORDS', 'a, an, as, at, before, but, by, for, from, is, in, into, like, of, off, on, onto, per, since, than, the, this, that, to, up, via, with');

/**
 * Implements hook_hook_info().
 */
function pathauto_hook_info() {
  $hooks = array(
    'pathauto',
    'path_alias_types',
    'pathauto_pattern_alter',
    'pathauto_alias_alter',
    'pathauto_is_alias_reserved',
  );
  return array_fill_keys($hooks, array('group' => 'pathauto'));
}


/**
 * Implements hook_module_implements_alter().
 *
 * Adds pathauto support for core modules.
 */
function pathauto_module_implements_alter(&$implementations, $hook) {
  if (in_array($hook, array('pathauto', 'path_alias_types'))) {
    $modules = array('node', 'taxonomy', 'user', 'forum');
    foreach ($modules as $module) {
      if (\Drupal::moduleHandler()->moduleExists($module)) {
        $implementations[$module] = TRUE;
      }
    }
    // Move pathauto.module to get included first since it is responsible for
    // other modules.
    unset($implementations['pathauto']);
    $implementations = array_merge(array('pathauto' => 'pathauto'), $implementations);
  }
}

/**
 * Implements hook_help().
 */
function pathauto_help($path, $arg) {
  switch ($path) {
    case 'admin/help#pathauto':
      module_load_include('inc', 'pathauto');
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides a mechanism for modules to automatically generate aliases for the content they manage.') . '</p>';
      $output .= '<h3>' . t('Settings') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Maximum alias and component length') . '</dt>';
      $output .= '<dd>' . t('The <strong>maximum alias length</strong> and <strong>maximum component length</strong> values default to 100 and have a limit of @max from Pathauto. This length is limited by the length of the "alias" column of the url_alias database table. The default database schema for this column is @max. If you set a length that is equal to that of the one set in the "alias" column it will cause problems in situations where the system needs to append additional words to the aliased URL. You should enter a value that is the length of the "alias" column minus the length of any strings that might get added to the end of the URL. The length of strings that might get added to the end of your URLs depends on which modules you have enabled and on your Pathauto settings. The recommended and default value is 100.', array('@max' => _pathauto_get_schema_alias_maxlength())) . '</dd>';
      $output .= '</dl>';
      return $output;

    case 'admin/config/search/path/update_bulk':
      $output = '<p>' . t('Bulk generation will only generate URL aliases for items that currently have no aliases. This is typically used when installing Pathauto on a site that has existing un-aliased content that needs to be aliased in bulk.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_permission().
 */
function pathauto_permission() {
  return array(
    'administer pathauto' => array(
      'title' => t('Administer pathauto'),
      'description' => t('Allows a user to configure patterns for automated aliases and bulk delete URL-aliases.'),
    ),
    'notify of path changes' => array(
      'title' => t('Notify of Path Changes'),
      'description' => t('Determines whether or not users are notified.'),
    ),
  );
}

/**
 * Load an URL alias pattern by entity, bundle, and language.
 *
 * @param $entity
 *   An entity (e.g. node, taxonomy, user, etc.)
 * @param $bundle
 *   A bundle (e.g. content type, vocabulary ID, etc.)
 * @param $language
 *   A language code, defaults to the LANGUAGE_NONE constant.
 */
function pathauto_pattern_load_by_entity($entity, $bundle = '', $language = Language::LANGCODE_NOT_SPECIFIED) {
  $config = \Drupal::configFactory()->get('pathauto.pattern');

  $patterns = &drupal_static(__FUNCTION__, array());

  $pattern_id = "$entity:$bundle:$language";
  if (!isset($patterns[$pattern_id])) {
    $variables = array();
    if ($language != Language::LANGCODE_NOT_SPECIFIED) {
      $variables[] = "{$entity}.{$bundle}.{$language}";
    }
    if ($bundle) {
      $variables[] = "{$entity}.{$bundle}._default";
    }
    $variables[] = "{$entity}._default";

    foreach ($variables as $variable) {
      if ($pattern = trim($config->get($variable))) {
        break;
      }
    }

    $patterns[$pattern_id] = $pattern;
  }

  return $patterns[$pattern_id];
}

/**
 * Delete multiple URL aliases.
 *
 * Intent of this is to abstract a potential path_delete_multiple() function
 * for Drupal 7 or 8.
 *
 * @param $pids
 *   An array of path IDs to delete.
 */
function pathauto_path_delete_multiple($pids) {
  foreach ($pids as $pid) {
    \Drupal::service('path.alias_storage')->delete(array('pid' => $pid));
  }
}

/**
 * Delete an URL alias and any of its sub-paths.
 *
 * Given a source like 'node/1' this function will delete any alias that have
 * that specific source or any sources that match 'node/1/%'.
 *
 * @param $source
 *   An string with a source URL path.
 */
function pathauto_path_delete_all($source) {
  $sql = "SELECT pid FROM {url_alias} WHERE source = :source OR source LIKE :source_wildcard";
  $pids = db_query($sql, array(':source' => $source, ':source_wildcard' => $source . '/%'))->fetchCol();
  if ($pids) {
    pathauto_path_delete_multiple($pids);
  }
}

/**
 * Delete an entity URL alias and any of its sub-paths.
 *
 * This function also checks to see if the default entity URI is different from
 * the current entity URI and will delete any of the default aliases.
 *
 * @param EntityInterface $entity
 *   An entity object.
 * @param string $default_uri
 *   The optional default uri path for the entity.
 */
function pathauto_entity_path_delete_all(EntityInterface $entity, $default_uri = NULL) {
  pathauto_path_delete_all($entity->getSystemPath());
  if (isset($default_uri) && $entity->getSystemPath() != $default_uri) {
    pathauto_path_delete_all($default_uri);
  }
}


/**
 * Implements hook_entity_bundle_rename().
 */
function pathauto_entity_bundle_rename($entity_type_id, $bundle_old, $bundle_new) {
  $config = \Drupal::configFactory()->get('pathauto.pattern');
  $bundle_settings = $config->get($entity_type_id);

  if (isset($bundle_settings[$bundle_old])) {
    $bundle_settings[$bundle_new] = $bundle_settings[$bundle_old];
    unset($bundle_settings[$bundle_old]);
    $config->set($entity_type_id, $bundle_settings);
    $config->save();
  }
}

/**
 * Implements hook__entity_bundle_delete().
 */
function pathauto_entity_bundle_delete($entity_type, $bundle) {
  $config = \Drupal::configFactory()->get('pathauto.pattern');
  $config->clear($entity_type . '.' . $bundle);
  $config->save();
}


/**
 * Implements hook_entity_presave().
 */
function pathauto_entity_presave($entity) {
  // About to be saved (before insert/update)
  if (!empty($entity->path->pathauto) && isset($entity->path->old_alias)
      && $entity->path->alias == '' && $entity->path->old_alias != '') {
    /*
     * There was an old alias, but when pathauto_perform_alias was checked
     * the javascript disabled the textbox which led to an empty value being
     * submitted. Restoring the old path-value here prevents the Path module
     * from deleting any old alias before Pathauto gets control.
     */
    $entity->path->alias = $entity->path->old_alias;
  }

  // Help prevent errors with progromatically creating entities by defining
  // path['alias'] as an empty string.
  // @see http://drupal.org/node/1328180
  // @see http://drupal.org/node/1576552
  if (isset($entity->path->pathauto) && !isset($entity->path->alias)) {
    $entity->path->alias = '';
  }
}


function pathauto_is_alias_reserved($alias, $source, $langcode = Language::LANGCODE_NOT_SPECIFIED) {
  foreach (\Drupal::moduleHandler()->getImplementations('pathauto_is_alias_reserved') as $module) {
    $args = array(
      $alias,
      $source,
      $langcode,
    );

    $result = \Drupal::moduleHandler()->invoke($module, 'pathauto_is_alias_reserved', $args);

    if (!empty($result)) {
      // As soon as the first module says that an alias is in fact reserved,
      // then there is no point in checking the rest of the modules.
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Implements hook_pathauto_is_alias_reserved() on behalf of path.module.
 */
function path_pathauto_is_alias_reserved($alias, $source, $langcode) {
  return (bool) db_query_range("SELECT pid FROM {url_alias} WHERE source <> :source AND alias = :alias AND langcode IN (:language, :language_none) ORDER BY langcode DESC, pid DESC", 0, 1, array(
    ':source' => $source,
    ':alias' => $alias,
    ':language' => $langcode,
    ':language_none' => Language::LANGCODE_NOT_SPECIFIED,
  ))->fetchField();
}

/**
 * Implements hook_pathauto_is_alias_reserved().
 */
function pathauto_pathauto_is_alias_reserved($alias, $source, $langcode) {
  module_load_include('inc', 'pathauto');
  return _pathauto_path_is_callback($alias);
}


/**
 * @name pathauto_node Pathauto integration for the core node module.
 * @{
 */

/**
 * Implements hook_node_insert().
 */
function pathauto_node_insert($node) {
  pathauto_node_update_alias($node, 'insert');
}

/**
 * Implements hook_node_update().
 */
function pathauto_node_update($node) {
  pathauto_node_update_alias($node, 'update');
}

/**
 * Implements hook_node_delete().
 */
function pathauto_node_delete($node) {
  pathauto_entity_path_delete_all($node, "node/{$node->id()}");
}


/**
 * Update the URL aliases for an individual node.
 *
 * @param $node
 *   A node object.
 * @param $op
 *   Operation being performed on the node ('insert', 'update' or 'bulkupdate').
 * @param $options
 *   An optional array of additional options.
 */
function pathauto_node_update_alias(NodeInterface $node, $op, array $options = array()) {
  // Skip processing if the user has disabled pathauto for the node.
  if (isset($node->path->pathauto) && empty($node->path->pathauto) && empty($options['force'])) {
    return;
  }

  $options += array('language' => $node->prepareLangcode());

  // Skip processing if the node has no pattern.
  if (!pathauto_pattern_load_by_entity('node', $node->getType(), $options['language'])) {
    return;
  }

  module_load_include('inc', 'pathauto');
  return \Drupal::service('pathauto.manager')->createAlias('node', $op, $node->getSystemPath(), array('node' => $node), $node->getType(), $options['language']);
}

/**
 * Update the URL aliases for multiple nodes.
 *
 * @param array $nids
 *   An array of node IDs.
 * @param string $op
 *   Operation being performed on the nodes ('insert', 'update' or
 *   'bulkupdate').
 * @param array $options
 *   An optional array of additional options.
 */
function pathauto_node_update_alias_multiple(array $nids, $op, array $options = array()) {
  $options += array('message' => FALSE);

  $nodes = node_load_multiple($nids);
  foreach ($nodes as $node) {
    pathauto_node_update_alias($node, $op, $options);
  }

  if (!empty($options['message'])) {
    drupal_set_message(\Drupal::translation()->formatPlural(count($nids), 'Updated URL alias for 1 node.', 'Updated URL aliases for @count nodes.'));
  }
}

/**
 * @} End of "name pathauto_node".
 */

/**
 * @name pathauto_taxonomy Pathauto integration for the core taxonomy module.
 * @{
 */

/**
 * Implements hook_taxonomy_term_insert().
 */
function pathauto_taxonomy_term_insert($term) {
  pathauto_taxonomy_term_update_alias($term, 'insert');
}

/**
 * Implements hook_taxonomy_term_update().
 */
function pathauto_taxonomy_term_update($term) {
  pathauto_taxonomy_term_update_alias($term, 'update', array('alias children' => TRUE));
}

/**
 * Implements hook_taxonomy_term_delete().
 */
function pathauto_taxonomy_term_delete($term) {
  pathauto_entity_path_delete_all($term, "taxonomy/term/{$term->tid}");
}


/**
 * Update the URL aliases for an individual taxonomy term.
 *
 * @param TermInterface $term
 *   A taxonomy term object.
 * @param string $op
 *   Operation being performed on the term ('insert', 'update' or 'bulkupdate').
 * @param array $options
 *   An optional array of additional options.
 */
function pathauto_taxonomy_term_update_alias(TermInterface $term, $op, array $options = array()) {
  // Skip processing if the user has disabled pathauto for the term.
  if (isset($term->path->pathauto) && empty($term->path->pathauto) && empty($options['force'])) {
    return;
  }

  $module = 'taxonomy_term';
  $config_forum = \Drupal::configFactory()->get('forum.settings');

  if ($term->getVocabularyId() == $config_forum->get('vocabulary')) {
    if (\Drupal::moduleHandler()->moduleExists('forum')) {
      $module = 'forum';
    }
    else {
      return;
    }
  }

  // Check that the term has its bundle, which is the vocabulary's machine name.
  if (!isset($term->vocabulary_machine_name)) {
    $vocabulary = entity_load('taxonomy_vocabulary', $term->getVocabularyId());
    $term->vocabulary_machine_name = $vocabulary->id();
  }

  $options += array(
    'alias children' => FALSE,
    'language' => $term->language()->getId(),
  );

  // Skip processing if the term has no pattern.
  if (!pathauto_pattern_load_by_entity($module, $term->vocabulary_machine_name)) {
    return;
  }

  module_load_include('inc', 'pathauto');
  $result = \Drupal::service('pathauto.manager')->createAlias($module, $op, $term->getSystemPath(), array('term' => $term), $term->vocabulary_machine_name, $options['language']);

  if (!empty($options['alias children'])) {
    // For all children generate new aliases.
    $options['alias children'] = FALSE;
    unset($options['language']);
    foreach (taxonomy_get_tree($term->getVocabularyId(), $term->id()) as $subterm) {
      pathauto_taxonomy_term_update_alias($subterm, $op, $options);
    }
  }

  return $result;
}

/**
 * Update the URL aliases for multiple taxonomy terms.
 *
 * @param array $tids
 *   An array of term IDs.
 * @param string $op
 *   Operation being performed on the nodes ('insert', 'update' or
 *   'bulkupdate').
 * @param array $options
 *   An optional array of additional options.
 */
function pathauto_taxonomy_term_update_alias_multiple(array $tids, $op, array $options = array()) {
  $options += array('message' => FALSE);

  $terms = entity_load_multiple('taxonomy_term', $tids);
  foreach ($terms as $term) {
    pathauto_taxonomy_term_update_alias($term, $op, $options);
  }

  if (!empty($options['message'])) {
    drupal_set_message(\Drupal::translation()->formatPlural(count($tids), 'Updated URL alias for 1 term.', 'Updated URL aliases for @count terms.'));
  }
}


/**
 * @} End of "name pathauto_taxonomy".
 */

/**
 * @name pathauto_user Pathauto integration for the core user module.
 * @{
 */

/**
 * Implements hook_user_insert().
 */
function pathauto_user_insert($account) {
  pathauto_user_update_alias($account, 'insert');
}

/**
 * Implements hook_user_update().
 */
function pathauto_user_update(&$edit, $account, $category) {
  pathauto_user_update_alias($account, 'update');
}

/**
 * Implements hook_user_delete().
 */
function pathauto_user_delete($account) {
  pathauto_entity_path_delete_all($account, $account->getSystemPath());
}


/**
 * Update the URL aliases for an individual user account.
 *
 * @param EntityInterface $account
 *   A user account object.
 * @param $op
 *   Operation being performed on the account ('insert', 'update' or
 *   'bulkupdate').
 * @param $options
 *   An optional array of additional options.
 */
function pathauto_user_update_alias(EntityInterface $account, $op, array $options = array()) {
  // Skip processing if the user has disabled pathauto for the account.
  if (isset($account->path->pathauto) && empty($account->path->pathauto) && empty($options['force'])) {
    return;
  }

  $options += array(
    // $user->language is not the user entity language, thus we need to skip
    // the property fallback check.
    'language' => $account->language(),
  );

  // Skip processing if the account has no pattern.
  if (!pathauto_pattern_load_by_entity('user', '', $options['language']->id)) {
    return;
  }

  module_load_include('inc', 'pathauto');
  $return = \Drupal::service('pathauto.manager')->createAlias('user', $op, $account->getSystemPath(), array('user' => $account), NULL, $options['language']->id);

  return $return;
}

/**
 * Update the URL aliases for multiple user accounts.
 *
 * @param array $uids
 *   An array of user account IDs.
 * @param string $op
 *   Operation being performed on the accounts ('insert', 'update' or
 *   'bulkupdate').
 * @param array $options
 *   An optional array of additional options.
 */
function pathauto_user_update_alias_multiple(array $uids, $op, array $options = array()) {
  $options += array('message' => FALSE);

  $accounts = User::loadMultiple($uids);
  foreach ($accounts as $account) {
    pathauto_user_update_alias($account, $op, $options);
  }

  if (!empty($options['message'])) {
    drupal_set_message(\Drupal::translation()->formatPlural(count($uids), 'Updated URL alias for 1 user account.', 'Updated URL aliases for @count user accounts.'));
  }
}

/**
 * @} End of "name pathauto_user".
 */


/**
 * Implements hook_entity_base_field_info_alter().
 */
function pathauto_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
  if (isset($fields['path']) && $fields['path']->getType() == 'path') {
    $fields['path']->setDisplayOptions('form', array(
      'type' => 'pathauto',
      'weight' => 30,
    ));
  }
}
